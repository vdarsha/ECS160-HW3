package com.ecs160;


import com.ecs160.BlueSkySchema.Post;
import com.ecs160.Parser.Parser;
import com.ecs160.persistence.ReflectedObjectAttributes;
import com.ecs160.persistence.Session;
import org.apache.commons.cli.*;
import redis.clients.jedis.Jedis;

import java.io.FileNotFoundException;
import java.lang.reflect.InvocationTargetException;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Scanner;

public class MyApp {
    /**
     * Entry-point into program.
     * Note that specifying a custom file will search from the current working directory in which
     * the JAR file is executed.
     *
     * To test on the default given "input.json", do not specify --file.
     * Then, the application will simply use the built-in "input.json" file.
     * @param args --file <absolute file path> (DEFAULT: None (internal input.json))
     */
    public static void main(String[] args) throws Exception {
        try {
            // Create parser
            Parser parser = new Parser();
            CommandLine cmdArgs = parseConsole(args);
            String fileName = "input.json";
            boolean isInternal = true;

            // Get the specified filename
            if (cmdArgs.hasOption("file")) {
                fileName = cmdArgs.getOptionValue("file");
                isInternal = false;
            }

            // Parse Jedis posts (only parent-level and first-level replies)
            List<Post> parsedPosts = parser.parseThreads(isInternal, fileName);
            System.out.println("Step 1: Successfully parsed BlueSky posts");

            // Create Jedis session
            Jedis jedisSession = new Jedis("localhost", 6379);;
            // Create persistence session
            Session persistSession = new Session(jedisSession);

            // Add all the parsed BlueSky posts into the persistence session
            for (Post post : parsedPosts) {
                persistSession.add(post);
            }
            System.out.printf("Step 2: Successfully added all %d top-level posts to persistence session (reply posts will be persisted dynamically on persistAll() call)\n", parsedPosts.size());

            // Persist all added BlueSky posts
            persistSession.persistAll();
            System.out.println("Step 3: Successfully persisted all top-level posts and first-level replies");

            Post post = loadUserPost(persistSession);
            System.out.println("Step 5: Successfully loaded post and its replies from Redis store");

            System.out.println("Step 6: Printing out post contents:\n");
            System.out.println("Top level post:");
            printPost(post, false);
            for (Post reply : post.getReplies()) {
                System.out.println();
                printPost(reply, true);
            }
        } catch (Exception ex) {
            /*
             * If an exception occurs in main thread, then
             * re-throw to terminate the program with stack trace.
             */
            throw ex;
        }
    }

    /**
     * Generate command-line argument parser using Apache commons-cli
     * @param args List of command line arguments
     * @return command-line argument object
     * @throws ParseException propagates exceptions generated by commons-cli library
     */
    public static CommandLine parseConsole(String[] args) throws ParseException {
        // USAGE NOTICE:
        // We followed this tutorial for how to use Apache commons-cli package:
        // https://www.tutorialspoint.com/commons_cli/commons_cli_overview.htm
        Options options = new Options();
        options.addOption("file", true, "path to BlueSky JSON file");

        CommandLineParser parser = new PosixParser();
        return parser.parse(options, args);
    }

    /**
     * Request a post id from console and then dynamically load the post
     * from Redis using the persistence framework.
     *
     * Extra credit functionality is implemented:
     * Fields denoted @LazyLoad will not have data immediately loaded.
     * Instead, lazy loaded data will only be loaded when a getter method on the object is invoked.
     * @param session persistence session to load Post from.
     * @return Post with data optionally immediately loaded, depending on where @LazyLoad is set.
     * @throws Exception session.load() may throw an exception
     */
    public static Post loadUserPost(Session session) throws Exception {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Step 4: Enter the numerical post id for the post you wish to view: ");
        int postId = scanner.nextInt();

        // Create template Post object using default constructor
        ReflectedObjectAttributes newPostAttrs = new ReflectedObjectAttributes(Post.class);
        Post postTemplate = (Post) newPostAttrs.generateInstance();
        // Set only the post id to the requested id
        newPostAttrs.setId(postTemplate, postId);

        Post loadedPost = (Post) session.load(postTemplate, newPostAttrs);

        return loadedPost;
    }

    /**
     * Print out post contents.
     * For neatness, it can be specified whether the post to print is a reply to a parent-level post or not.
     * If so, then some indenting is added for neatness.
     * @param post Post to print out
     * @param isReply Specifies whether the post is a reply to a parent-level post
     */
    public static void printPost(Post post, boolean isReply) {
        String preText = "";
        if (isReply) {
            preText = "\t\t";
            System.out.println("--> Reply post:");
        }

        System.out.printf(preText + "Post id: %s\n", post.getId());
        System.out.printf(preText + "Post date: %s\n", post.getDateTime());
        System.out.printf(preText + "Post content: \"%s\"\n", post.getPostText());
    }
}
